#!/bin/bash

############################################################################
########## INFO ############################################################
############################################################################
### ABOUT:
####### sql2cloud is used to backup a mySQL database and upload it to FTP
####### or Dropbox
### AUTOHR:
####### Amin Babaeipanah
### VERSION:
####### 0.30
### CHANGELOG:
####### Added error check
####### Initial release
### USAGE:
####### If you want to upload to dropbox, make a Dropbox app and get a
####### Dropbox access token from:
#######     https://www.dropbox.com/developers/apps
####### Change the variables below (variables to change)
####### Upload this script to somwhere outside of public_html or www
#######     For example: $HOME/backup
#######     Or:          /home/hosting/backup
####### Run "chmod +x sql2cloud" to make it executable
####### Run it using "./sql2cloud"
####### Cron job sample to backup everyday at 3am:
#######     0 3 * * * /home/hosting/backup/sql2cloud
### NOTES:
####### This scirpt can backup multiple databases at once but it's not
####### recommended if you are on a shared hosting.
####### You can use multiple copies of this script with diferent names and
####### schedule them to backup one database at different times.
####### You can use the same access token for all your backup jobs.

############################################################################
########## VARIABLES TO CHANGE #############################################
############################################################################
#backupName[0]="backup-name-1"
#dbHost[0]="localhost"
#dbName[0]="database_name"
#dbUser[0]="database_user"
#dbPass[0]="database_password"
#backupName[1]="backup-name-2"
#dbHost[1]="localhost"
#dbName[1]="database_name"
#dbUser[1]="database_user"
#dbPass[1]="database_password"
backupName[0]="backup-name" #backup date will be added to this name
dbHost[0]="localhost"
dbName[0]="database_name"
dbUser[0]="database_user"
dbPass[0]="database_password"
compressionLevel=5 #1 to 9, fast compression to best compression
#do you want to uplaod this backup to dropbox?
uploadToDropbox=1
dropboxAccessKey="dropbox_access_token"
#do you want to upload this backup to another ftp?
uploadToFtp=0
ftpHost="ftp://domain.com/backup/"
ftpUser="username"
ftpPass="password"

############################################################################
########## sql2dropbox #####################################################
############################################################################
backupDir="$(dirname $(readlink -f $0))"
if [ ! -d $backupDir ]; then mkdir -p $backupDir; fi
#exit if conf error
if [ $uploadToDropbox -eq 1 ]; then
	if [ -z "${backupName[0]}" ] || [ -z "${dbHost[0]}" ] || [ -z "${dbName[0]}" ] || [ -z "${dbUser[0]}" ] || [ -z "${dbPass[0]}" ] || [ -z "$compressionLevel" ] || [ -z "$dropboxAccessKey" ] ; then
		echo -ne "\033[31m [x] Configuration error! Please check \"VARIABLES TO CHANGE\" section.\e[39m\n"
		exit 1
	fi
else
	if [ -z "${backupName[0]}" ] || [ -z "${dbHost[0]}" ] || [ -z "${dbName[0]}" ] || [ -z "${dbUser[0]}" ] || [ -z "${dbPass[0]}" ] || [ -z "$compressionLevel" ] || [ -z "$ftpHost" ] || [ -z "$ftpUser" ] || [ -z "$ftpPass" ] ; then
		echo -ne "\033[31m [x] Configuration error! Please check \"VARIABLES TO CHANGE\" section.\e[39m\n"
		exit 1
	fi
fi
#backup database(s)
for i in ${!dbHost[@]}; do
	#backup the first database
	now=$(date +"%Y%m%d-%H%M%S")
	backupFile=${backupName[$i]}'_'$now.sql.gz
    mysqldump -h ${dbHost[$i]} -u ${dbUser[$i]} -p${dbPass[$i]} ${dbName[$i]} | gzip -$compressionLevel > $backupDir/$backupFile
	#upload to dropbox
	if [ $uploadToDropbox -eq 1 ]; then
		curl -X POST https://content.dropboxapi.com/2/files/upload \
			--header "Authorization: Bearer $dropboxAccessKey" \
			--header "Dropbox-API-Arg: {\"path\": \"/$backupFile\"}" \
			--header "Content-Type: application/octet-stream" \
			--data-binary @$backupDir/$backupFile > /dev/null 2>&1
	fi
	#upload to ftp
	if [ $uploadToFtp -eq 1 ]; then
		curl -T $backupDir/$backupFile $ftpHost --user $ftpUser:$ftpPass -s
	fi
	rm -rf $backupDir/$backupFile #delete the local backup since we uploaded to dropbox
done
